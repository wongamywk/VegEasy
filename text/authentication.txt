var Joi = require('joi');
var User = require('../models/user');
var crypto = require('crypto');

/**
 * Responds to POST /login and logs the user in, well, soon.
 */
exports.login = {
  handler: function (request, reply) {

    // In the version with Travelogue and Mongoose this was all handled by Passport (hence we retrieved
    // Passport and inserted the request and reply variables).
    User.authenticate()(request.payload.email, request.payload.password, function (err, user, passwordError) {

      // There has been an error, do something with it. I just print it to console for demo purposes.
      if (err) {
        console.error(err);
        return reply.redirect('/login');
      }

      // Something went wrong with the login process, could be any of:
      // https://github.com/saintedlama/passport-local-mongoose#error-messages
      if (passwordError) {
        // For now, just show the error and login form
        console.log(passwordError);
        return reply.view('login', {
          errorMessage: passwordError.message
        });
      //  return reply({success:false, error:passwordError.message})
      }

      if(user){
        if (user.token === 0){
        console.log('pls verify email');
        var message = "Please verify your account first"
        return reply.view('login', {
          errorMessage: message
        });}
        else{  request.auth.session.set(user);
          console.log(request.payload.email + ' login successful and user token is' + user.token);
          return reply.redirect('/success');}
      }
      // If the authentication failed user will be false. If it's not false, we store the user
      // in our session and redirect the user to the hideout


      return reply.redirect('/login');

    });
  }
};

exports.Verification = {
  handler: function (request, reply) {

    // In the version with Travelogue and Mongoose this was all handled by Passport (hence we retrieved
    // Passport and inserted the request and reply variables).
    User.authenticate()(request.payload.email, request.payload.password, function (err, user, passwordError) {

      // There has been an error, do something with it. I just print it to console for demo purposes.
      if (err) {
        console.error(err);
        return reply.redirect('/verify');
      }

      // Something went wrong with the login process, could be any of:
      // https://github.com/saintedlama/passport-local-mongoose#error-messages
      if (passwordError) {
        // For now, just show the error and login form
        console.log(passwordError);
        return reply.view('verify', {
          errorMessage: passwordError.message
        });
      //  return reply({success:false, error:passwordError.message})
      }

      if(user){
        user.token = 1;
          request.auth.session.set(user);
          var verifymessage = request.payload.email + " has been verified";

          console.log(request.payload.email + ' login successful and user token is ' + user.token);
          return reply.view('secrethideout', {
          email: verifymessage
          });
      }
      // If the authentication failed user will be false. If it's not false, we store the user
      // in our session and redirect the user to the hideout


      return reply.redirect('/login');

    });
  }
};
/**
 * Responds to GET /logout and logs out the user
 */
exports.logout = {
  auth: 'session',
  handler: function (request, reply) {
    request.auth.session.clear();
    reply().redirect('/login');
  }
};

/**
 * Responds to POST /register and creates a new user.
 */
exports.register = {
  validate: {
    payload: {
      email: Joi.string().email().required(),
      password: Joi.string().required()
    }
  },
  handler: function(request, reply) {

  /*  //create random 16 character token
  var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  var token = '';
  for (var i = 16; i > 0; --i) {
    token += chars[Math.round(Math.random() * (chars.length - 1))];
  }*/

  //generate authentication token
var randToken =Math.floor((Math.random() * 100) + 54);

/*  // create expiration date
var expires = new Date();
expires.setHours(expires.getHours() + 6);

user.resetToken = {
  token: token,
  expires: expires
};*/

    // Create a new user, this is the place where you add firstName, lastName etc.
    // Just don't forget to add them to the validator above.
    var newUser = new User({
      email: request.payload.email,
      vericode: randToken,
      token: 0
    });

    // The register function has been added by passport-local-mongoose and takes as first parameter
    // the user object, as second the password it has to hash and finally a callback with user info.
    User.register(newUser, request.payload.password, function(err, user) {



      // Return error if present
      if (err) {
        return reply(err);
      }
      var link = "http://127.0.0.1:5000" + "/verify/" + randToken;

const nodemailer = require('nodemailer');

// create reusable transporter object using the default SMTP transport
let transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: 'amywongtutor@gmail.com',
        pass: 'AltShift15'
    }
});

// setup email data with unicode symbols
let mailOptions = {
    from: '"DO NOT REPLY" <amywongtutor@gmail.com>', // sender address
    to: request.payload.email, // list of receivers
    subject: 'Account verification email', // Subject line
    //text: 'Hello world ?', // plain text body
    html: "Hello,<br> Please Click on the link to verify your email.<br><a href=" + link + ">Click here to verify</a>"
   }

// send mail with defined transport object
transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
        return console.log(error);
    }
    console.log('Message %s sent: %s', info.messageId, info.response);
});
      console.log('registered');
      return reply.redirect('/login');
    });
  }
};
